import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Model
from google.colab import drive
import numpy as np

# Montar o Google Drive
drive.mount('/content/drive')

# Caminhos no Google Drive
base_dir = '/content/drive/MyDrive/classificador_ruas'
train_data_dir = os.path.join(base_dir, 'treino')
test_data_dir = os.path.join(base_dir, 'teste')
img_width, img_height = 224, 224
batch_size = 32
epochs = 50

# Gerador de dados com augmentação
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

# Gerador de dados para teste (sem augmentação)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary'
)

# Criar o modelo VGG16
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(img_width, img_height, 3))
x = base_model.output
x = Flatten()(x)
x = Dense(128, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)
model = Model(inputs=base_model.input, outputs=predictions)

# Congelar as camadas da VGG16
for layer in base_model.layers:
    layer.trainable = False

# Compilar o modelo
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Treinando o modelo
model.fit(
    train_generator,
    epochs=epochs,
    steps_per_epoch=train_generator.samples // batch_size
)

# Salvar o modelo treinado
model.save('/content/drive/MyDrive/modelo_ruas_com_carros.h5')

# Função de predição
def classify_new_image(img_path, threshold=0.5):
    img = tf.keras.preprocessing.image.load_img(img_path, target_size=(img_width, img_height))
    x = tf.keras.preprocessing.image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = tf.keras.applications.vgg16.preprocess_input(x)
    
    prediction = model.predict(x)
    
    if prediction[0][0] > threshold:
        print(f"{img_path}: Rua sem carros!")
    else:
        print(f"{img_path}: Rua com carros!")

# Função para classificar todas as imagens de uma pasta
def classify_images_in_folder(folder_path, threshold=0.5):
    for filename in os.listdir(folder_path):
        if filename.endswith(".jpg") or filename.endswith(".png"):
            image_path = os.path.join(folder_path, filename)
            classify_new_image(image_path, threshold)
            print("-" * 30)

# Teste de imagens
classify_images_in_folder(test_data_dir)
